//
//  MainPresenter.swift
//  WeatherTestApp
//
//  Created by Aleksandr Kretov on 06.12.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MainPresentationLogic {
    func presentWeather(response: MainScene.LoadWeather.Response)
    func presentError(response: MainScene.HandleError.Response)
}

final class MainPresenter: MainPresentationLogic {
    // MARK: - Public Properties

    weak var viewController: MainDisplayLogic?

    // MARK: - Presentation Logic

    func presentWeather(response: MainScene.LoadWeather.Response) {
        let cellsViewModels = makeWeatherCellViewModels(from: response.weather)
        if response.places.isEmpty {
            let viewModel = MainScene.LoadWeather.ViewModel(weatherCellViewModels: cellsViewModels, placeCellViewModels: [])
            viewController?.displayCurrentWeather(viewModel: viewModel)
        } else {
            let placeCellViewModels = makePlaceCellViewModels(from: response.places)
            let viewModel = MainScene.LoadWeather.ViewModel(weatherCellViewModels: cellsViewModels,
                                                            placeCellViewModels: placeCellViewModels)
            viewController?.displaySearchResults(viewModel: viewModel)
        }
    }

    func presentError(response: MainScene.HandleError.Response) {
        let messege = response.error.asAFError?.localizedDescription
        let viewModel = MainScene.HandleError.ViewModel(errorMessage: messege ?? "")
        viewController?.displayError(viewModel: viewModel)
    }

    // MARK: - Private methods

    private func makeWeatherCellViewModels(from weather: [CurrentWeather]) -> [WeatherCellViewModelProtocol] {
        weather.map { element in
            let icon = getWeatherIcon(from: element.weather.first?.icon)
            return WeatherCellViewModel(cityName: element.name ?? "--",
                                        weatherIcon: icon,
                                        temp: getFormattedTemp(element.main.temp),
                                        currentTime: Date().shortTimeStyle(adding: Double(element.timezone)),
                                        cityId: element.internalId ?? 0)
        }
    }

    private func makePlaceCellViewModels(from places: [Place]) -> [PlaceCellViewModelRepresentable] {
        places.map { element in
            PlaceCellViewModel(cityName: element.name,
                               stateName: element.state,
                               countryName: getCountryName(from: element.country))
        }
    }

    private func getCountryName(from countryCode: String) -> String {
        let currentLocale = Locale.current
        return currentLocale.localizedString(forRegionCode: countryCode) ?? countryCode
    }

    private func getWeatherIcon(from code: String?) -> UIImage? {
        guard
            let codePrefix = code?.prefix(2),
            let image = UIImage(named: String(codePrefix))
        else { return nil }
        return image
    }

    private func getFormattedTemp(_ temp: Double?) -> String {
        guard let temp else { return "--" }
        if round(temp) == 0 {
            // If temp is Zero ignore "-" sign and return 0
            return NSString(format: "0%@" as NSString, "\u{00B0}") as String
        } else {
            let roundedTemp = String(format: "%.f", temp)
            return NSString(format: "\(roundedTemp)%@" as NSString, "\u{00B0}") as String
        }
    }
}
