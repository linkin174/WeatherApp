//
//  DetailsInteractor.swift
//  WeatherTestApp
//
//  Created by Aleksandr Kretov on 10.12.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DetailsBusinessLogic {
    func onLoad()
    func reloadForecastOnEnterForeground()
    func loadForecast()
}

protocol DetailsDataStore {
    var weather: CurrentWeather? { get set }
}

class DetailsInteractor: DetailsBusinessLogic, DetailsDataStore {
    // MARK: - Public Properties

    var weather: CurrentWeather?
    var presenter: DetailsPresentationLogic?

    // MARK: - Private Properties

    private let networkService: NetworkServiceProtocol

    // MARK: - Initializers

    init(networkService: NetworkServiceProtocol) {
        self.networkService = networkService
    }

    // MARK: Interaction Logic

    func onLoad() {
        guard let weather else { return }
        // For displaying header
        let response = Details.ShowCurrentWeather.Response(weather: weather)
        presenter?.presentCurrentWeather(response: response)
        // Loading daily information
        loadForecast()
    }

    func reloadForecastOnEnterForeground() {
        let currentDate = Date()
        let forecastDate = Date().dateFrom(secondsUTC: weather?.dt ?? 0)
        if forecastDate.distance(to: currentDate) > 3600 {
            loadCurrentWeather()
            loadForecast()
        } else {
            presenter?.endLoading()
        }
    }

    func loadForecast() {
        guard let weather else { return }
        let city = City(coord: weather.coord, id: weather.id ?? 0)
        networkService.fetchDailyForecast(for: city) { [unowned self] result in
            switch result {
            case .success(let forecast):
                let response = Details.ShowForecast.Response(forecast: forecast, currentweather: weather)
                presenter?.presentForecast(response: response)
            case .failure(let error):
                let response = Details.HandleError.Response(error: error)
                presenter?.presentError(response: response)
            }
        }
    }

    private func loadCurrentWeather() {
        guard let weather else { return }
        let city = City(coord: weather.coord, id: weather.id ?? 0)
        networkService.fetchCurrentWeather(for: [city]) { [unowned self] result in
            switch result {
            case .success(let currentWeather):
                if let first = currentWeather.first {
                    let response = Details.ShowCurrentWeather.Response(weather: first)
                    presenter?.presentCurrentWeather(response: response)
                }
            case .failure(let error):
                let response = Details.HandleError.Response(error: error)
                presenter?.presentError(response: response)
            }
        }
    }
}
