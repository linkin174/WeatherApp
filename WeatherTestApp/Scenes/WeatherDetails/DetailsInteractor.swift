//
//  DetailsInteractor.swift
//  WeatherTestApp
//
//  Created by Aleksandr Kretov on 10.12.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DetailsBusinessLogic {
    func loadForecast()
}

protocol DetailsDataStore {
    var weather: CurrentWeather? { get set }
}

class DetailsInteractor: DetailsBusinessLogic, DetailsDataStore {

    var weather: CurrentWeather?
    var presenter: DetailsPresentationLogic?

    private let networkService: NetworkServiceProtocol

    init(networkService: NetworkServiceProtocol) {
        self.networkService = networkService
    }

    func loadForecast() {
        guard let weather else { return }
        #warning("continue")
        let city = City(coord: weather.coord, id: weather.internalId ?? 0)
        networkService.fetchDailyForecast(for: city) { [unowned self] result in
            switch result {
            case .success(let forecast):
                let response = Details.ShowForecast.Response(forecast: forecast)
                presenter?.presentForecast(response: response)
            case .failure(let error):
                let response = Details.HandleError.Response(error: error)
                presenter?.presentError(response: response)
            }
        }
//        let response = Details.ShowForecast.Response(forecast: weather)
//            presenter?.presentForecast(response: response)

//        let city = City(coord: weather?.coord)
//        networkService.fetchDailyForecast(for: city) { [weak self] result in
//            switch result {
//            case .success(let success):
//                let response = Details.ShowForecast.Response(forecast: success)
//                self?.presenter?.presentForecast(response: response)
//                print(response.forecast.list.map {$0.dtTxt})
//            case .failure(let failure):
//                let response = Details.HandleError.Response(error: failure)
//                self?.presenter?.presentError(response: response)
//            }
//        }
    }
}
