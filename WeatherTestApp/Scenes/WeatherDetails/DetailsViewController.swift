//
//  DetailsViewController.swift
//  WeatherTestApp
//
//  Created by Aleksandr Kretov on 10.12.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import SnapKit
import UIKit

protocol DetailsDisplayLogic: AnyObject {
    func displayDetailedForecast(viewModel: Details.ShowForecast.ViewModel)
    func displayCurrentWeather(viewModel: Details.ShowCurrentWeather.ViewModel)
    func displayError(viewModel: Details.HandleError.ViewModel)
    func displayEndLoading()
}

final class DetailsViewController: UIViewController {
    // MARK: - Public properties

    var interactor: DetailsBusinessLogic?
    var router: (NSObjectProtocol & DetailsRoutingLogic & DetailsDataPassing)?

    // MARK: - Private properties

    private var notificationObserver: NSObjectProtocol?

    // MARK: Views

    private var loadingIndicator: UIActivityIndicatorView = {
        let indicator = UIActivityIndicatorView()
        indicator.startAnimating()
        indicator.hidesWhenStopped = true
        indicator.color = .white
        return indicator
    }()

    private lazy var scrollView: UIScrollView = {
        let scrollView = UIScrollView()
        scrollView.alwaysBounceVertical = true
        scrollView.delegate = topHeaderView
        scrollView.alpha = 0
        scrollView.showsVerticalScrollIndicator = false
        return scrollView
    }()

    private lazy var topHeaderView = TopHeaderView(frame: CGRect(x: 0,
                                                                 y: statusBarHeight,
                                                                 width: view.frame.width,
                                                                 height: 326))

    private lazy var dayForecastStack = DayForecastStackView()

    private let collectionView = HourlyForecastCollectionView()

    private let miscInfoView = MiscInfoView()

    private let firstSeparator = makeSeparator()
    private let secondSeparator = makeSeparator()

    // MARK: - Initializers

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
        navigationController?.navigationBar.prefersLargeTitles = false
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
    }

    deinit {
        if let notificationObserver {
            NotificationCenter.default.removeObserver(notificationObserver)
        }
    }

    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = #colorLiteral(red: 0.2492019534, green: 0.5160208344, blue: 0.8688297868, alpha: 1)
        navigationItem.largeTitleDisplayMode = .never
        setupConstraints()
        interactor?.onLoad()
        notificationObserver = NotificationCenter.default.addObserver(forName: UIApplication.willEnterForegroundNotification,
                                                                      object: nil,
                                                                      queue: .main,
                                                                      using: { [unowned self] _ in reloadForecastOnEnterForeground() })
    }

    // MARK: - Setup Clean Code Design Pattern

    private func setup() {
        let viewController = self
        let networkService = AFNetworkService()
        let interactor = DetailsInteractor(networkService: networkService)
        let presenter = DetailsPresenter()
        let router = DetailsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: - Private Methods

    private func setupConstraints() {
        view.addSubview(topHeaderView)
        topHeaderView.addSubview(loadingIndicator)
        view.addSubview(firstSeparator)
        view.addSubview(collectionView)
        view.addSubview(secondSeparator)
        view.addSubview(scrollView)

        scrollView.addSubview(dayForecastStack)
        scrollView.addSubview(miscInfoView)

        loadingIndicator.snp.makeConstraints { make in
            make.trailing.equalToSuperview().inset(20)
            make.top.equalToSuperview().offset(20)
        }

        firstSeparator.snp.makeConstraints { make in
            make.top.equalTo(topHeaderView.snp.bottom)
            make.width.equalToSuperview()
            make.height.equalTo(1)
        }

        collectionView.snp.makeConstraints { make in
            make.top.equalTo(firstSeparator.snp.bottom)
            make.width.equalToSuperview()
            make.height.equalTo(116)
        }

        secondSeparator.snp.makeConstraints { make in
            make.top.equalTo(collectionView.snp.bottom)
            make.width.equalToSuperview()
            make.height.equalTo(1)
        }

        scrollView.snp.makeConstraints { make in
            make.top.equalTo(secondSeparator.snp.bottom)
            make.width.equalToSuperview()
            make.bottom.equalTo(view.snp.bottomMargin)
        }

        
        dayForecastStack.snp.makeConstraints { make in
            make.top.equalToSuperview().offset(15)
            make.width.equalToSuperview()
            make.centerX.equalToSuperview()
            make.height.equalTo(181)
        }

        miscInfoView.snp.makeConstraints { make in
            make.top.equalTo(dayForecastStack.snp.bottom).offset(15)
            make.bottom.equalToSuperview().inset(30)
            make.width.equalToSuperview()
            make.centerX.equalToSuperview()
            make.height.equalTo(355)
        }
    }

    private func reloadForecastOnEnterForeground() {
        loadingIndicator.startAnimating()
        interactor?.reloadForecastOnEnterForeground()
    }

    private func animateViews() {
        collectionView.fadeIn(duration: 0.6)
        firstSeparator.fadeIn(duration: 0.6)
        secondSeparator.fadeIn(duration: 0.6)
        scrollView.fadeIn(duration: 0.6)
    }

    private class func makeSeparator() -> UIView {
        let view = UIView()
        view.backgroundColor = .white.withAlphaComponent(0.5)
        view.alpha = 0
        return view
    }
}

extension DetailsViewController: DetailsDisplayLogic {
    // MARK: - Display Logic
    
    func displayDetailedForecast(viewModel: Details.ShowForecast.ViewModel) {
        loadingIndicator.stopAnimating()
        dayForecastStack.setup(viewModels: viewModel.dailyForecastViewModels)
        miscInfoView.setup(viewModel: viewModel.miscInfoViewModel)
        collectionView.setup(with: viewModel.hourlyForecastViewModels)
        animateViews()
    }

    func displayCurrentWeather(viewModel: Details.ShowCurrentWeather.ViewModel) {
        topHeaderView.setup(viewModel: viewModel.headerViewModel)
    }

    func displayError(viewModel: Details.HandleError.ViewModel) {
        let retryAction = UIAlertAction(title: "Retry", style: .default) { _ in
            self.interactor?.loadForecast()
        }
        showAlert(title: "OOPS!", message: viewModel.errorMessage, actions: [retryAction])
    }

    func displayEndLoading() {
        loadingIndicator.stopAnimating()
    }
}
