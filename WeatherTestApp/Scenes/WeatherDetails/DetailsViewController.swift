//
//  DetailsViewController.swift
//  WeatherTestApp
//
//  Created by Aleksandr Kretov on 10.12.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DetailsDisplayLogic: AnyObject {
    func displayDetailedForecast(viewModel: Details.ShowForecast.ViewModel)
}

class DetailsViewController: UIViewController, DetailsDisplayLogic {

    var interactor: DetailsBusinessLogic?
    var router: (NSObjectProtocol & DetailsRoutingLogic & DetailsDataPassing)?

    // MARK: Views

    private var viewModel: Details.ShowForecast.ViewModel? {
        didSet {
            collectionView.reloadData()
        }
    }

    private lazy var topHeaderView = TopHeaderView(frame: CGRect(x: 0,
                                                                 y: statusBarHeight,
                                                                 width: view.frame.width,
                                                                 height: 326))

    private lazy var dayForecastStack = DayForecastStackView()

    private lazy var scrollView: UIScrollView = {
        let scrollView = UIScrollView()
        scrollView.translatesAutoresizingMaskIntoConstraints = false
        scrollView.alwaysBounceVertical = true
        scrollView.delegate = topHeaderView
        return scrollView
    }()

    private lazy var collectionView: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .horizontal
        layout.sectionInset = UIEdgeInsets(top: 12, left: 20, bottom: 12, right: 20)
        layout.itemSize = CGSize(width: 45, height: 100)
        let view = UICollectionView(frame: .zero, collectionViewLayout: layout)
        view.showsHorizontalScrollIndicator = false
        view.translatesAutoresizingMaskIntoConstraints = false
        view.dataSource = self
//        view.delegate = self
        view.backgroundColor = .clear
        view.register(HourlyCell.self, forCellWithReuseIdentifier: HourlyCell.reuseID)
        return view
    }()

    private let miscInfoView = MiscInfoView()

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    #warning("test")

    // MARK: - Setup Clean Code Design Pattern

    private func setup() {
        let viewController = self
        let networkService = AFNetworkService()
        let interactor = DetailsInteractor(networkService: networkService)
        let presenter = DetailsPresenter()
        let router = DetailsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    private func setupConstraints() {
        view.addSubview(topHeaderView)
        view.addSubview(collectionView)
        view.addSubview(scrollView)
        scrollView.addSubview(dayForecastStack)
        scrollView.addSubview(miscInfoView)

        collectionView.topAnchor.constraint(equalTo: topHeaderView.bottomAnchor).isActive = true
        collectionView.widthAnchor.constraint(equalTo: view.widthAnchor).isActive = true
        collectionView.heightAnchor.constraint(equalToConstant: 116).isActive = true

        scrollView.topAnchor.constraint(equalTo: collectionView.bottomAnchor).isActive = true
        scrollView.widthAnchor.constraint(equalTo: view.widthAnchor).isActive = true
        scrollView.bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: -30).isActive = true

        dayForecastStack.topAnchor.constraint(equalTo: scrollView.topAnchor).isActive = true
        dayForecastStack.widthAnchor.constraint(equalTo: scrollView.widthAnchor, constant: -40).isActive = true
        dayForecastStack.centerXAnchor.constraint(equalTo: scrollView.centerXAnchor).isActive = true
        dayForecastStack.heightAnchor.constraint(equalToConstant: CGFloat((viewModel?.dailyForecastViewModels.count ?? 0) * 25)).isActive = true

        miscInfoView.widthAnchor.constraint(equalToConstant: 0).isActive = true
        miscInfoView.topAnchor.constraint(equalTo: dayForecastStack.bottomAnchor, constant: 15).isActive = true
    }

    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = #colorLiteral(red: 0.2492019534, green: 0.5160208344, blue: 0.8688297868, alpha: 1)
        doSomething()
        navigationItem.largeTitleDisplayMode = .never
    }

    override func viewWillLayoutSubviews() {
        super.viewWillLayoutSubviews()
        setupConstraints()
    }

    // MARK: - request data from DetailsInteractor

    func doSomething() {
        interactor?.loadForecast()
    }

    // MARK: - display view model from DetailsPresenter

    func displayDetailedForecast(viewModel: Details.ShowForecast.ViewModel) {
        self.viewModel = viewModel
        topHeaderView.setup(viewModel: viewModel.headerViewModel)
        dayForecastStack.setup(viewModel: viewModel.dailyForecastViewModels)
        miscInfoView.setup(viewModel: viewModel.miscInfoViewModel)
    }
}

extension DetailsViewController: UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        viewModel?.hourlyForecastViewModels.count ?? 0
    }

    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: HourlyCell.reuseID, for: indexPath) as? HourlyCell else { return UICollectionViewCell() }
        if let vm = viewModel?.hourlyForecastViewModels[indexPath.item] {
            cell.setup(viewModel: vm)
        }
        return cell
    }
}
